
#Использовать logos

Перем Лог;
Перем ЭтоWindows;

Процедура ДобавитьОписанияКоманд(Знач Парсер) Экспорт
	ДобавитьКомандуBuild(Парсер);
	ДобавитьКомандуRun(Парсер);
	ДобавитьКомандуTest(Парсер);
	ДобавитьКомандуPrepare(Парсер);
	ДобавитьКомандуInstall(Парсер);
	ДобавитьКомандуUpdate(Парсер);
	ДобавитьКомандуApp(Парсер);
	ДобавитьКомандуConfig(Парсер);
	ДобавитьКомандуList(Парсер);
	ДобавитьКомандуVersion(Парсер);
	ДобавитьКомандуHelp(Парсер);
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
// Описания команд

Процедура ДобавитьКомандуPrepare(Знач Парсер)
	Команда = Парсер.ОписаниеКоманды("prepare", "Подготовить новый каталог разрабатываемого пакета");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "КаталогСборкиПакета", "Каталог, в котором будет вестись разработка");
	Парсер.ДобавитьКоманду(Команда);
КонецПроцедуры

Процедура ДобавитьКомандуBuild(Знач Парсер)
	Команда = Парсер.ОписаниеКоманды("build", "Собрать пакет из исходников");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "КаталогИсходников", "Каталог исходников");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-mf", "Файл манифеста сборки (packagedef)");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-out", "Выходной каталог");
	Парсер.ДобавитьКоманду(Команда);
КонецПроцедуры

Процедура ДобавитьКомандуRun(Знач Парсер)
	Команда = Парсер.ОписаниеКоманды("run", "Выполнить произвольную задачу");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ИмяЗадачи", "Имя выполняемой задачи.");
	Парсер.ДобавитьПараметрКоллекцияКоманды(Команда, "ПараметрыЗадачи", "Коллекция параметров, передаваемых задаче");
	Парсер.ДобавитьКоманду(Команда);
КонецПроцедуры

Процедура ДобавитьКомандуTest(Знач Парсер)
	Команда = Парсер.ОписаниеКоманды("test", "Выполнить тестирование проекта");
	Парсер.ДобавитьПараметрКоллекцияКоманды(Команда, "ПараметрыЗадачи", "Коллекция параметров, передаваемых задаче тестирования");
	Парсер.ДобавитьКоманду(Команда);
КонецПроцедуры

Процедура ДобавитьКомандуInstall(Знач Парсер)
	Команда = Парсер.ОписаниеКоманды("install", "Выполнить установку. Если указано имя пакета, происходит установка из хаба или из файла. В обратном случае устанавливаются зависимости текущего пакета по файлу packagedef.");
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-all", "Установить все пакеты, зарегистрированные в хабе");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-f", "Указать файл из которого нужно установить пакет");
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-l", "Установить пакеты в локальный каталог oscript_modules");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ИмяПакета", "Имя пакета в хабе. Чтобы установить конкретную версию, используйте ИмяПакета@ВерсияПакета");
	Парсер.ДобавитьКоманду(Команда);
КонецПроцедуры

Процедура ДобавитьКомандуUpdate(Знач Парсер)
	Команда = Парсер.ОписаниеКоманды("update", "Обновить пакет");
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-all", "Обновить все установленные пакеты");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-f", "Указать файл из которого нужно установить пакет");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ИмяПакета", "Имя пакета в хабе. Чтобы установить конкретную версию, используйте ИмяПакета@ВерсияПакета");
	Парсер.ДобавитьКоманду(Команда);
КонецПроцедуры

Процедура ДобавитьКомандуApp(Знач Парсер)
	Команда = Парсер.ОписаниеКоманды("app", "Создать " + ?(ЭтоWindows, "bat", "sh") + "-файл для запуска скрипта в указанном каталоге");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ИмяСкрипта", "Имя скрипта в текущем каталоге или полный путь скрипта");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "Каталог", "(необязательно) Каталог, в котором будет создан скрипт запуска. По умолчанию """ + КаталогПрограммы() + """");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-name", "Имя генерируемого исполняемого файла");
	Парсер.ДобавитьКоманду(Команда);
КонецПроцедуры

Процедура ДобавитьКомандуConfig(Знач Парсер)
 	Команда = Парсер.ОписаниеКоманды("config", "Задать пользовательские настройки");
	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-winCreateBashLauncher","Создавать sh-скрипт запуска для пакетов приложений в среде Windows");
 	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "-proxyusedefault","Использовать ПроксиПоУмолчанию (системные настройки)");
 	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-proxyserver", "Адрес прокси");
 	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-proxyport", "Порт прокси");
 	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-proxyuser", "Пользователь прокси ");
 	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-proxypass", "Пароль прокси");
 	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-hub-url", "URL расположения хаба библиотек os ");
 	Парсер.ДобавитьИменованныйПараметрКоманды(Команда, "-hub-path", "Путь в хабе до папки библиотек");
 	Парсер.ДобавитьКоманду(Команда);
 КонецПроцедуры

Процедура ДобавитьКомандуList(Знач Парсер)
	Команда = Парсер.ОписаниеКоманды("list", "Вывести список пакетов");
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-q", """Тихий"" режим вывода без лишних сообщений.");
	Парсер.ДобавитьПараметрФлагКоманды(Команда, "-remote", "Вывести список пакетов в хабе");
	Парсер.ДобавитьКоманду(Команда);
КонецПроцедуры

Процедура ДобавитьКомандуVersion(Знач Парсер)
	Команда = Парсер.ОписаниеКоманды("version", "Вывести версию продукта");
	Парсер.ДобавитьКоманду(Команда);
КонецПроцедуры

Процедура ДобавитьКомандуHelp(Знач Парсер) Экспорт
	Команда = Парсер.ОписаниеКоманды("help", "Справка по командам");
	Парсер.ДобавитьПозиционныйПараметрКоманды(Команда, "ИмяКоманды", "Имя команды по которой надо получить справку");
	Парсер.ДобавитьКоманду(Команда);
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
	
	Если ПараметрыКоманды.Команда <> "version" И ПараметрыКоманды.Команда <> "help" Тогда
		ВывестиВерсию();
	КонецЕсли;

	ЗначенияПараметров = ПараметрыКоманды.ЗначенияПараметров;
	Если ПараметрыКоманды.Команда = "build" Тогда
		ВыполнитьСборку(ЗначенияПараметров["КаталогИсходников"], ЗначенияПараметров["-mf"], ЗначенияПараметров["-out"]);
	ИначеЕсли ПараметрыКоманды.Команда = "run" Тогда
		ВыполнитьЗадачу(ЗначенияПараметров["ИмяЗадачи"], ЗначенияПараметров["ПараметрыЗадачи"]);
	ИначеЕсли ПараметрыКоманды.Команда = "test" Тогда
		ВыполнитьЗадачу("test", ЗначенияПараметров["ПараметрыЗадачи"]);
	ИначеЕсли ПараметрыКоманды.Команда = "prepare" Тогда
		ПодготовитьКаталогПроекта(ЗначенияПараметров["КаталогСборкиПакета"]);
	ИначеЕсли ПараметрыКоманды.Команда = "install" Тогда
		УстановитьПакет(ЗначенияПараметров);
	ИначеЕсли ПараметрыКоманды.Команда = "update" Тогда
		ОбновитьПакет(ЗначенияПараметров);
	ИначеЕсли ПараметрыКоманды.Команда = "app" Тогда
		СоздатьСкриптЗапуска(ЗначенияПараметров["ИмяСкрипта"], ЗначенияПараметров["Каталог"], ЗначенияПараметров["-name"]);
	ИначеЕсли ПараметрыКоманды.Команда = "config" Тогда
		НастройкиПриложения.СохранитьНастройки(ЗначенияПараметров);	
	ИначеЕсли ПараметрыКоманды.Команда = "list" Тогда
		ВывестиСписокПакетов(ЗначенияПараметров);
	ИначеЕсли ПараметрыКоманды.Команда = "version" Тогда
		ВывестиВерсиюКратко();
	ИначеЕсли ПараметрыКоманды.Команда = "help" Тогда
		ВывестиСправку(ЗначенияПараметров);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////
// Реализация команд

Процедура УстановитьПакет(Знач ЗначенияПараметров) Экспорт
	
	Установщик = Новый УстановкаПакета;
	
	Если ЗначенияПараметров["-l"] Тогда
		Установщик.УстановитьРежимУстановкиПакетов(РежимУстановкиПакетов.Локально);
	Иначе
		Установщик.УстановитьРежимУстановкиПакетов(РежимУстановкиПакетов.Глобально);
	КонецЕсли;
	
	Если ЗначенияПараметров["-all"] Тогда
		Установщик.УстановитьВсеПакетыИзОблака();
	ИначеЕсли ЗначенияПараметров["-f"] = Неопределено И ЗначенияПараметров["ИмяПакета"] = Неопределено Тогда
		Установщик.УстановитьПакетыПоОписаниюПакета();
	ИначеЕсли ЗначенияПараметров["-f"] <> Неопределено Тогда
		Установщик.УстановитьПакетИзАрхива(ЗначенияПараметров["-f"]);
	Иначе
		Установщик.УстановитьПакетИзОблака(ЗначенияПараметров["ИмяПакета"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьСборку(Знач КаталогИсходников, Знач ФайлМанифеста, Знач ВыходнойКаталог) Экспорт
	
	Сборщик = Новый СборщикПакета();
	Сборщик.СобратьПакет(КаталогИсходников, ФайлМанифеста, ВыходнойКаталог);
	
КонецПроцедуры

Процедура ПодготовитьКаталогПроекта(Знач ВыходнойКаталог) Экспорт
	
	Сборщик = Новый СборщикПакета();
	Сборщик.ПодготовитьКаталогПроекта(ВыходнойКаталог);
	
КонецПроцедуры

Процедура ВыполнитьЗадачу(Знач ИмяЗадачи, Знач ПараметрыЗадачи) 
	
	ИсполнительЗадач = Новый ИсполнительЗадач();
	ИсполнительЗадач.ВыполнитьЗадачу(ИмяЗадачи, ПараметрыЗадачи);
	
КонецПроцедуры

Процедура ОбновитьПакет(Знач ЗначенияПараметров) Экспорт
	
	Установщик = Новый УстановкаПакета;
	Если ЗначенияПараметров["-all"] Тогда
		Установщик.ОбновитьУстановленныеПакеты();
	ИначеЕсли ЗначенияПараметров["-f"] <> Неопределено Тогда
		Установщик.УстановитьПакетИзАрхива(ЗначенияПараметров["-f"]);
	Иначе
		Установщик.ОбновитьПакетИзОблака(ЗначенияПараметров["ИмяПакета"]);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСкриптЗапуска(Знач ИмяСкрипта, Знач Каталог, Знач ИмяФайлаЗапуска) Экспорт
	Если ИмяСкрипта = Неопределено Тогда
		ВызватьИсключение "Не указано имя файла скрипта";
	КонецЕсли;
	
	ФайлСкрипта = Новый Файл(ИмяСкрипта);
	ПолноеИмяСкрипта = ФайлСкрипта.ПолноеИмя;
	Если Не ФайлСкрипта.Существует() Тогда
		ФайлСкрипта = Новый Файл(ИмяСкрипта + ".os");
		Если Не ФайлСкрипта.Существует() Тогда
			ВызватьИсключение "Файл скрипта """ + ПолноеИмяСкрипта + """ не найден";
		Иначе
			ПолноеИмяСкрипта = ФайлСкрипта.ПолноеИмя;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ФайлСкрипта.ЭтоФайл() Тогда
		ВызватьИсключение "Указанный скрипт """ + ПолноеИмяСкрипта + """ не является файлом";
	КонецЕсли;
	
	Если Каталог = Неопределено Тогда
		Каталог = КаталогПрограммы();
	КонецЕсли;
	
	ФайлКаталога = Новый Файл(Каталог);
	Каталог = ФайлКаталога.ПолноеИмя;
	Если ФайлКаталога.Существует() Тогда
		Если ФайлКаталога.ЭтоФайл() Тогда
			ВызватьИсключение "Указанный каталог """ + Каталог + """ является файлом";
		КонецЕсли;
	Иначе
		СоздатьКаталог(Каталог);
		Если Не ФайлКаталога.Существует() Тогда
			ВызватьИсключение "Не удалось создать каталог """ + Каталог + """";
		КонецЕсли;
	КонецЕсли;
	
	ИмяСкриптаЗапуска = ?(ИмяФайлаЗапуска = Неопределено, ФайлСкрипта.ИмяБезРасширения, ИмяФайлаЗапуска);
	Установщик = Новый УстановкаПакета;
	Установщик.СоздатьСкриптЗапуска(ИмяСкриптаЗапуска, ПолноеИмяСкрипта, Каталог);
	
КонецПроцедуры

Процедура ВывестиСписокПакетов(Знач ЗначенияПараметров)
	
	ТихийРежим = ЗначенияПараметров["-q"];
	
	Если ЗначенияПараметров["-remote"] Тогда
		ТекстСообщения  = СтрШаблон("Пакеты в хабе:");		
		КэшПакетовВХабе = Новый КэшПакетовХаба();	
		УстановленныеПакеты =  КэшПакетовВХабе.ПолучитьПакетыХаба();	
	Иначе	
		
		ПутьККаталогуПакетов = ПолучитьЗначениеСистемнойНастройки("lib.system");
		ТекстСообщения = СтрШаблон("Пакеты в системном каталоге библиотек <%1>:", ПутьККаталогуПакетов);		
		
		КэшУстановленныхПакетов = Новый КэшУстановленныхПакетов();
		УстановленныеПакеты = КэшУстановленныхПакетов.ПолучитьУстановленныеПакеты();
	КонецЕсли;
	
	Если НЕ ТихийРежим Тогда
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
	Для Каждого УстановленныйПакет Из УстановленныеПакеты Цикл
		СтрокаСообщения = УстановленныйПакет.Ключ;
		Если ТипЗнч(УстановленныйПакет.Значение) = Тип("ОписаниеПакета") Тогда
			ОписаниеПакета = УстановленныйПакет.Значение;
			СтрокаСообщения = СтрокаСообщения + "@" + ОписаниеПакета.Свойства().Версия;
		КонецЕсли;
		Сообщить(СтрокаСообщения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВерсиюКратко()
	Сообщить(Константы.ВерсияПродукта);
КонецПроцедуры

Процедура ВывестиВерсию()
	Сообщить("OneScript Package Manager v" + Константы.ВерсияПродукта);
	Сообщить("");
КонецПроцедуры

Процедура ВывестиСправку(Знач ЗначенияПараметров)
	Если ЗначенияПараметров["ИмяКоманды"] = Неопределено Тогда
		ВывестиСправкуПоКомандам();
	Иначе
		ВывестиСправкуПоКоманде(ЗначенияПараметров["ИмяКоманды"]);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиСправкуПоКомандам() Экспорт
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки;
	ДобавитьОписанияКоманд(Парсер);
	
	ВозможныеКоманды = Парсер.СправкаВозможныеКоманды();
	ВывестиВерсию();
	Сообщить("Возможные команды:");
	
	МаксШирина = 0;
	Поле = "               ";
	Для Каждого Команда Из ВозможныеКоманды Цикл
		ТекШирина = СтрДлина(Команда.Команда);
		Если ТекШирина > МаксШирина Тогда
			МаксШирина = ТекШирина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Команда Из ВозможныеКоманды Цикл
		Сообщить(" " + Лев(Команда.Команда + Поле, МаксШирина + 2) + "- " + Команда.Пояснение);
	КонецЦикла;
	
	Сообщить("Наберите opm help <команда>, чтобы вывести справку по команде");
	
КонецПроцедуры

Процедура ВывестиСправкуПоКоманде(Знач ИмяКоманды)
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки;
	ДобавитьОписанияКоманд(Парсер);
	
	ВозможныеКоманды = Парсер.СправкаВозможныеКоманды();
	ОписаниеКоманды = ВозможныеКоманды.Найти(ИмяКоманды, "Команда");
	Если ОписаниеКоманды = Неопределено Тогда
		Сообщить("Команда отсуствует: " + ИмяКоманды);
		Возврат;
	КонецЕсли;
	
	Сообщить("" + ОписаниеКоманды.Команда + " - " + ОписаниеКоманды.Пояснение);
	Сообщить("Параметры:");
	Для Каждого СтрПараметр Из ОписаниеКоманды.Параметры Цикл
		Если Не СтрПараметр.ЭтоИменованныйПараметр Тогда
			Сообщить(СтрШаблон(" <%1> - %2", СтрПараметр.Имя, СтрПараметр.Пояснение));
		Иначе
			Сообщить(СтрШаблон(" %1 - %2", СтрПараметр.Имя, СтрПараметр.Пояснение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////

Лог = Логирование.ПолучитьЛог("oscript.app.opm");
СистемнаяИнформация = Новый СистемнаяИнформация;
ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;
