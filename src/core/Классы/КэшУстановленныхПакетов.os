
#Использовать fs
#Использовать logos
#Использовать semver

Перем Лог;

// Массив каталогов в порядке возрастания приоритета
Перем МассивКаталоговПоискаБиблиотек;

Перем УстановленныеПакеты;

Функция ПакетУстановлен(Знач ОписаниеЗависимости, Знач КаталогПоискаБиблиотек = "") Экспорт
	
	Перем УстановленныеПакеты;
	УстановленныеПакеты = ПолучитьУстановленныеПакеты();
	
	ДанныеПакета = УстановленныеПакеты.Получить(ОписаниеЗависимости.ИмяПакета);
	ПакетУстановлен = ДанныеПакета <> Неопределено;
	Если ПакетУстановлен И НЕ ПустаяСтрока(КаталогПоискаБиблиотек) Тогда
		КаталогБиблиотекПакета = Новый Файл(ДанныеПакета.КаталогПакета).Путь;
		ПакетУстановлен = ФС.ПутиРавны(КаталогБиблиотекПакета, КаталогПоискаБиблиотек);
	КонецЕсли;

	ПутьКФайлуМетаданных = ПолучитьПутьКФайлуМетаданныхБиблиотеки(ОписаниеЗависимости.ИмяПакета);
	
	ФайлМетаданных = Новый Файл(ПутьКФайлуМетаданных);
	Если ФайлМетаданных.Существует() Тогда	
		МетаОписаниеПакета = РаботаСПакетами.ПрочитатьМетаданныеПакета(ПутьКФайлуМетаданных);
		УстановленнаяВерсия = МетаОписаниеПакета.Свойства().Версия;	
	Иначе
		// @deprecated
		УстановленнаяВерсия = "0";
	КонецЕсли;

	Лог.Отладка("ПакетУстановлен: Перед вызовом СравнитьВерсии(ЭтаВерсия = <%1>, БольшеЧемВерсия = <%2>)",
		УстановленнаяВерсия,
		ОписаниеЗависимости.МинимальнаяВерсия);
	
	ВерсияSNAPSHOT = "SNAPSHOT";
	Если ОписаниеЗависимости.МинимальнаяВерсия = ВерсияSNAPSHOT И УстановленнаяВерсия = ВерсияSNAPSHOT Тогда
		УстановленаКорректнаяВерсия = Истина;
	ИначеЕсли ОписаниеЗависимости.МинимальнаяВерсия = ВерсияSNAPSHOT И УстановленнаяВерсия <> ВерсияSNAPSHOT Тогда
		УстановленаКорректнаяВерсия = Ложь;
	Иначе
		Если ОписаниеЗависимости.МинимальнаяВерсия = Неопределено Тогда
			УстановленаКорректнаяВерсия = Истина;
		Иначе
			Попытка
				// Сначала пытаемся использовать семвер
				РезультатСравнения = Версии.СравнитьВерсии(УстановленнаяВерсия, ОписаниеЗависимости.МинимальнаяВерсия);
			Исключение
				// Если семвер не может обработать версию (например, 4-значную), используем модуль РаботаСВерсиями
				РезультатСравнения = РаботаСВерсиями.СравнитьВерсии(УстановленнаяВерсия, ОписаниеЗависимости.МинимальнаяВерсия);
			КонецПопытки;
			
			УстановленаКорректнаяВерсия = РезультатСравнения >= 0;
		КонецЕсли;
	КонецЕсли;
		
	Лог.Отладка("Пакет установлен: " + ПакетУстановлен);
	Лог.Отладка("Установлена корректная версия: " + УстановленаКорректнаяВерсия);
	Возврат ПакетУстановлен И УстановленаКорректнаяВерсия;
	
КонецФункции

Процедура Обновить() Экспорт
	
	УстановленныеПакеты = Новый Соответствие;
	Для Каждого КаталогБиблиотек Из МассивКаталоговПоискаБиблиотек Цикл

		Лог.Отладка("КаталогБиблиотек " + КаталогБиблиотек);

		НайденныеФайлы = НайтиФайлы(КаталогБиблиотек, ПолучитьМаскуВсеФайлы());
		Для Каждого ФайлКаталога Из НайденныеФайлы Цикл
			Если ФайлКаталога.ЭтоКаталог() Тогда

				// ДобавитьУстановленныйПакет заменит уже добавленный пакет при совпадении имён
				// Соответственно, более поздние каталоги будут иметь приоритет
				ДобавитьУстановленныйПакет(ФайлКаталога);

			КонецЕсли;
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьУстановленныеПакеты() Экспорт

	Если УстановленныеПакеты = Неопределено Тогда
		Обновить();
	КонецЕсли;

	Возврат УстановленныеПакеты;

КонецФункции

// Добавляет каталог в список, по которому выполняется поиск библиотек
Процедура ДобавитьКаталогБиблиотек(Знач Каталог) Экспорт

	МассивКаталоговПоискаБиблиотек.Добавить(Каталог);

КонецПроцедуры

Процедура ДобавитьУстановленныйПакет(Знач ФайлКаталога)

	ИмяПакета = ФайлКаталога.Имя;
	
	МетаОписаниеПакета = НайтиМетаОписаниеПакета(ФайлКаталога);
	Если МетаОписаниеПакета = Неопределено Тогда
		// @deprecated
		МетаОписаниеПакета = Истина;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("МетаданныеПакета", МетаОписаниеПакета);
	СтруктураДанных.Вставить("КаталогПакета", ФайлКаталога.ПолноеИмя);

	УжеДобавленныйПакет = УстановленныеПакеты.Получить(ИмяПакета);
	Если УжеДобавленныйПакет <> Неопределено Тогда
		
		СтруктураДанных.Вставить("Перекрывает", Новый Массив);
		СтруктураДанных.Перекрывает.Добавить(УжеДобавленныйПакет);

		Если УжеДобавленныйПакет.Свойство("Перекрывает") Тогда

			Для Каждого мПакет Из УжеДобавленныйПакет.Перекрывает Цикл
				СтруктураДанных.Перекрывает.Добавить(мПакет);
			КонецЦикла;

			УжеДобавленныйПакет.Удалить("Перекрывает");

		КонецЕсли;

	КонецЕсли;

	УстановленныеПакеты.Вставить(ИмяПакета, СтруктураДанных);
	
КонецПроцедуры

Функция НайтиМетаОписаниеПакета(Знач ФайлКаталога)
	
	ПутьКФайлуМетаданных = ОбъединитьПути(ФайлКаталога.ПолноеИмя, КонстантыOpm.ИмяФайлаМетаданныхПакета);
	ФайлМетаданных = Новый Файл(ПутьКФайлуМетаданных);
	Если ФайлМетаданных.Существует() Тогда
		Возврат РаботаСПакетами.ПрочитатьМетаданныеПакета(ПутьКФайлуМетаданных);
	КонецЕсли;
	
	ПутьКФайлуМетаданных = ОбъединитьПути(ФайлКаталога.ПолноеИмя, КонстантыOpm.ИмяФайлаКонфигурацииБиблиотеки);
	ФайлМетаданных = Новый Файл(ПутьКФайлуМетаданных);
	Если ФайлМетаданных.Существует() Тогда
		ОписаниеПакета = Новый ОписаниеПакета();
		ОписаниеПакета.Имя(ФайлКаталога.Имя);
		ОписаниеПакета.Версия("<НЕТ>");
		Возврат ОписаниеПакета;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ПолучитьПутьКФайлуМетаданныхБиблиотеки(ИмяПакета) Экспорт

	ПутьКФайлуМетаданных = "";
	Для Каждого КаталогБиблиотек Из МассивКаталоговПоискаБиблиотек Цикл
		ВремПутьКФайлуМетаданных = ОбъединитьПути(
			КаталогБиблиотек,
			ИмяПакета,
			КонстантыOpm.ИмяФайлаМетаданныхПакета
		);

		Лог.Отладка(Новый Файл(ВремПутьКФайлуМетаданных).ПолноеИмя);
		Если ФС.ФайлСуществует(ВремПутьКФайлуМетаданных) Тогда
			ПутьКФайлуМетаданных = ВремПутьКФайлуМетаданных;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПутьКФайлуМетаданных;
	
КонецФункции



Процедура ПриСозданииОбъекта(КаталогПоискаБиблиотек = "")
	
	Лог = Логирование.ПолучитьЛог("oscript.app.opm");
	МассивКаталоговПоискаБиблиотек = Новый Массив;
	
	Если ЗначениеЗаполнено(КаталогПоискаБиблиотек) Тогда
		МассивКаталоговПоискаБиблиотек.Добавить(КаталогПоискаБиблиотек);
	Иначе
		КаталогСистемныхБиблиотек = ОбъединитьПути(
			КаталогПрограммы(),
			ПолучитьЗначениеСистемнойНастройки("lib.system")
		);

		МассивКаталоговПоискаБиблиотек.Добавить(КаталогСистемныхБиблиотек);
		ДобавитьКаталогБиблиотек("./" + КонстантыOpm.ЛокальныйКаталогУстановкиПакетов);
	КонецЕсли;

КонецПроцедуры
