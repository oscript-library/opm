
#Использовать json
#Использовать logos

Перем мНастройки;
Перем мПутьФайлаНастроек;
Перем Лог;

Процедура УстановитьФайлНастроек(Знач Путь) Экспорт

	мПутьФайлаНастроек = Путь;
	мНастройки = Неопределено;

КонецПроцедуры

Функция Получить() Экспорт

	Если мНастройки = Неопределено Тогда
		Попытка
			ПрочитатьФайлНастроек();
		Исключение
			Лог.Отладка("Чтение файла настроек:
				|" + ОписаниеОшибки());
			УстановитьНастройкиПоУмолчанию();
		КонецПопытки;
	КонецЕсли;

	Возврат мНастройки;

КонецФункции

Процедура ПрочитатьФайлНастроек()
	
	Если Не ЗначениеЗаполнено(мПутьФайлаНастроек) Тогда
		ВызватьИсключение "Не установлен файл настроек";
	КонецЕсли;

	Текст = ПрочитатьФайл(мПутьФайлаНастроек);

	Чтение = Новый ПарсерJSON;
	Настройки = Чтение.ПрочитатьJSON(Текст,,,Истина);

	// TODO сделать конвертацию терминов json в русские свойства настроек

	мНастройки = Настройки;

КонецПроцедуры

Функция ПрочитатьФайл(Знач Путь)

	Чтение = Новый ЧтениеТекста(Путь);
	Текст = Чтение.Прочитать();
	Чтение.Закрыть();

	Возврат Текст;

КонецФункции

Процедура СохранитьФайл(Знач Текст,Знач Путь)
 
 	Запись = Новый ЗаписьТекста(Путь);
 	Запись.ЗаписатьСтроку(Текст);
 	Запись.Закрыть();
 
 КонецПроцедуры

Процедура УстановитьНастройкиПоУмолчанию()
	мНастройки = Новый Структура;
	НастройкиПроксиПоУмолчанию = НастройкиПроксиПроксиПоУмолчанию();
	мНастройки.Вставить("Прокси", НастройкиПроксиПоУмолчанию);
	мНастройки.Вставить("СоздаватьShСкриптЗапуска", Ложь)
	мНастройки.Вставить("СерверУдаленногоХранилища", Константы.СерверУдаленногоХранилища);
	мНастройки.Вставить("ПутьВХранилище", Константы.ПутьВХранилище);
КонецПроцедуры

Функция НастройкиПроксиПроксиПоУмолчанию()

	СтруктураПрокси = Новый Структура();
	СтруктураПрокси.Вставить("ИспользоватьПрокси", Ложь);
	СтруктураПрокси.Вставить("ПроксиПоУмолчанию", Истина);
	СтруктураПрокси.Вставить("Сервер");
	СтруктураПрокси.Вставить("Порт");
	СтруктураПрокси.Вставить("Пользователь");
	СтруктураПрокси.Вставить("Пароль");
	СтруктураПрокси.Вставить("ИспользоватьАутентификациюОС",Ложь);

	Возврат СтруктураПрокси;
КонецФункции	

Процедура СохранитьНастройки(Знач Параметры) Экспорт
	Получить();
	ЗаполнитьНастройкиИзПараметров(Параметры);
	Текст = СформироватьТекстНастроек(мНастройки);
	СохранитьФайл(Текст,мПутьФайлаНастроек);
КонецПроцедуры
  
Функция СформироватьТекстНастроек(Знач Настройки)
	ТекстНастроек = "";
	Json          =  Новый ПарсерJSON;
	ТекстНастроек = Json.ЗаписатьJSON(Настройки);

	Возврат ТекстНастроек;
КонецФункции

Процедура ЗаполнитьНастройкиИзПараметров(знач ЗначенияПараметров)
	
	мНастройки.Прокси.ПроксиПоУмолчанию = НЕ ЗначенияПараметров["-proxyusedefault"] = Неопределено;
	мНастройки.Прокси.Сервер            = ?(ЗначенияПараметров["-proxyserver"]      = Неопределено,	мНастройки.Прокси.Сервер,       ЗначенияПараметров["-proxyserver"]);
	мНастройки.Прокси.Порт              = ?(ЗначенияПараметров["-proxyport"]        = Неопределено,	мНастройки.Прокси.Порт,         ЗначенияПараметров["-proxyport"]);
	мНастройки.Прокси.Пользователь      = ?(ЗначенияПараметров["-proxyuser"]        = Неопределено,	мНастройки.Прокси.Пользователь, ЗначенияПараметров["-proxyuser"]);
	мНастройки.Прокси.Пароль            = ?(ЗначенияПараметров["-proxypass"]        = Неопределено,	мНастройки.Прокси.Пароль,       ЗначенияПараметров["-proxypass"]);
	
	Если мНастройки.Прокси.ПроксиПоУмолчанию Тогда
			мНастройки.Прокси.Сервер       = "";
			мНастройки.Прокси.Порт         = "";
			мНастройки.Прокси.Пользователь = "";
			мНастройки.Прокси.Пароль       = "";
	КонецЕсли;	

	мНастройки.Прокси.ИспользоватьПрокси =  мНастройки.Прокси.ПроксиПоУмолчанию ИЛИ ЗначениеЗаполнено(мНастройки.Прокси.Сервер);

	мНастройки.СоздаватьShСкриптЗапуска = ?(
		ЗначенияПараметров["-winCreateBashLauncher"] = Неопределено,
		мНастройки.СоздаватьShСкриптЗапуска,
		Булево(ЗначенияПараметров["-winCreateBashLauncher"])
	);

	СерверУдаленногоХранилища = ЗначенияПараметров["-hub-url"];

	Если ЗначениеЗаполнено(СерверУдаленногоХранилища) Тогда   
		мНастройки.СерверУдаленногоХранилища = СерверУдаленногоХранилища;
	КонецЕсли;

	ПутьВХранилище = ЗначенияПараметров["-hub-path"];
	
	Если ЗначениеЗаполнено(ПутьВХранилище) Тогда   
		мНастройки.ПутьВХранилище = ПутьВХранилище;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает установленный сервер удаленного хранилища
//
Функция ПоучитьНастройкуСерверУдаленногоХранилища() Экспорт

	Возврат Получить().СерверУдаленногоХранилища;
	
КонецФункции // ПоучитьНастройкуСерверУдаленногоХранилища()

// Функция возвращает установленный путь в сервере удаленного хранилища
//
Функция ПоучитьНастройкуПутьВХранилище() Экспорт

	Возврат Получить().ПутьВХранилище;
	
КонецФункции // ПоучитьНастройкуПутьВХранилище()


//------------

Лог = Логирование.ПолучитьЛог("oscript.app.opm");